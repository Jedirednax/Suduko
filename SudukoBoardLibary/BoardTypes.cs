namespace SudokuBoardLibrary
{
    public class BoardTypes
    {
        public static int[,] FullTest = new int[,]
        {
            {1,2,3,4,5,6,7,8,9},
            {4,5,6,7,8,9,1,2,3},
            {7,8,9,1,2,3,4,5,6},
            {9,1,2,3,4,5,6,7,8},
            {3,4,5,6,7,8,9,1,2},
            {6,7,8,9,1,2,3,4,5},
            {8,9,1,2,3,4,5,6,7},
            {2,3,4,5,6,7,8,9,1},
            {5,6,7,8,9,1,2,3,4},
        };

        public static int[,] SimpleConstraint = new int[,]
        {

        };
        public static int[,] Elimination = new int[,]
        {

        };

        public static int[,] BackTracking = new int[,]
        {

        };

        public static int[,] ObviousPair = new int[,]
        {
                            {9,0,0,0,2,0,6,7,0},
                {0,0,0,0,3,1,4,0,2},
                {0,0,0,7,0,0,9,0,0},
                {0,0,9,8,0,0,1,0,7},
                {1,0,2,0,0,0,8,9,0},
                {0,0,0,0,1,0,0,2,0},
                {7,0,4,2,8,0,3,0,0},
                {0,0,0,0,6,0,0,4,0},
                {0,0,0,3,9,0,7,6,0}
        };

        public static int[,] ObviousTriple = new int[,]
        {

        };


        public static readonly int[,] HiddenPair = new int[,]
        {
            //{7,2,0,4,0,8,0,3,0},
            //{0,8,0,0,0,0,0,4,7},
            //{4,0,1,0,7,6,8,0,2},
            //{8,1,0,7,3,9,0,0,0},
            //{0,0,0,8,5,1,0,0,0},
            //{0,0,0,2,6,4,0,8,0},
            //{2,0,9,6,8,0,4,1,3},
            //{3,4,0,0,0,0,0,0,8},
            //{1,6,8,9,4,3,2,7,5}

            //{5,0,0,0,0,3,0,0,8,},
            //{0,0,0,0,0,0,6,0,0,},
            //{0,3,0,0,8,0,2,0,4,},
            //{0,9,0,7,0,8,0,0,0,},
            //{0,0,0,2,0,0,0,0,7,},
            //{0,2,0,4,9,0,0,0,0,},
            //{0,0,7,9,0,0,0,0,3,},
            //{8,0,6,0,0,5,0,1,0,},
            //{0,0,0,0,0,0,0,0,6,},
            
            {5,0,0,0,0,3,0,0,8,},
            {0,0,0,0,0,0,6,3,0,},
            {0,3,0,0,8,0,2,0,4,},
            {0,9,0,7,0,8,0,0,0,},
            {0,0,0,2,0,0,0,0,7,},
            {7,2,0,4,9,0,0,0,0,},
            {2,1,7,9,6,4,0,0,3,},
            {8,4,6,3,0,5,0,1,0,},
            {0,5,0,8,1,0,0,0,6,},


//{5,9,0,0,0,0,7,0,0,},
//{0,0,0,6,0,4,0,0,0,},
//{0,0,0,5,0,0,6,8,0,},
//{0,0,3,0,0,0,0,0,2,},
//{7,0,0,0,0,0,1,0,0,},
//{6,0,0,4,0,3,9,0,0,},
//{0,0,0,2,0,0,0,0,3,},
//{0,0,2,0,0,5,0,6,0,},
//{3,0,0,0,1,0,0,5,0, },

        };

        public static int[,] HiddenTriple = new int[,]
        {

        };

        public static int[,] PointingPair = new int[,]
        {

        };

        public static int[,] PointingTriple = new int[,]
        {

        };

        public static int[,] XYWingRowCol = new int[,]
        {
            {8,1,5,2,4,7,3,6,9, },
            {3,9,0,0,5,8,4,2,0,},
            {4,0,2,0,0,9,0,5,8,},
            {6,8,4,9,7,1,2,3,5,},
            {9,0,0,5,2,4,8,1,6,},
            {5,2,1,0,0,3,9,7,4,},
            {2,0,0,0,9,6,5,0,0,},
            {7,0,9,0,0,0,0,0,0,},
            {1,0,0,0,0,0,0,9,0,},
        };

        public static int[,] XYWingBlockRow = new int[,]
        {

        };
        public static int[,] XYWingBlockCol = new int[,]
        {

        };


        public static int[,] XWing = new int[,]
        {

        };

        public static int[,] YWing = new int[,]
        {

        };
        public static int[,] SwordFish = new int[,]
        {

        };

        public static Board FullTestBoard()
        {
            return new Board(FullTest);
        }

        public static Board SimpleConstraintBoard()
        {
            return new Board(SimpleConstraint);
        }
        public static Board EliminationBoard()
        {
            return new Board(Elimination);
        }

        public static Board BackTrackingBoard()
        {
            return new Board(BackTracking);
        }

        public static Board ObviousPairBoard()
        {
            return new Board(ObviousPair);
        }

        public static Board ObviousTripleBoard()
        {
            return new Board(ObviousTriple);
        }
        public static Board HiddenPairBoard()
        {
            return new Board(HiddenPair);
        }

        public static int[,] LockedCandidatesBlockWithinRow = new int[,]
        {
            {0,4,8,0,0,3,9,0,0},
            {0,5,7,6,9,0,4,0,8},
            {0,2,9,7,0,0,5,1,0},
            {0,0,1,0,0,0,7,0,9},
            {0,0,2,9,7,0,1,0,0},
            {9,7,3,0,0,0,6,5,0},
            {7,0,5,0,2,0,3,4,0},
            {2,0,6,0,0,0,8,0,0},
            {8,0,4,0,0,7,2,0,0},
        };

        public static int[,] LockedCandidatesBlockWithinColumn = new int[,]
        {
            {0,5,2,4,1,0,6,0,0},
            {6,8,0,0,0,0,4,3,0},
            {4,0,0,8,0,0,2,0,0},
            {0,6,0,0,0,8,0,4,0},
            {0,0,4,6,0,1,0,0,9},
            {0,0,0,7,9,4,0,6,0},
            {2,0,0,3,0,0,0,0,4},
            {5,0,0,9,4,7,0,2,6},
            {7,4,6,1,8,2,9,5,3},
        };

        public static int[,] LockedCandidatesRowWithinBlock = new int[,]
        {
            {0,0,0,0,0,0,0,0,7},
            {1,0,0,8,0,0,0,5,0},
            {0,0,0,9,0,4,0,0,0},
            {0,7,1,0,9,0,8,0,2},
            {0,2,9,0,0,1,0,0,0},
            {0,0,0,0,2,0,0,0,0},
            {9,6,0,0,0,5,4,2,0},
            {0,0,2,6,0,9,0,1,5},
            {3,1,5,2,4,0,0,6,0},
        };

        public static int[,] LockedCandidatesColumnWithinBlock = new int[,]
        {
            {0,0,0,0,0,1,0,0,0},
            {0,8,4,0,7,0,0,0,0},
            {0,7,3,4,0,0,0,0,0},
            {0,0,8,5,6,0,3,0,1},
            {0,3,0,1,8,9,2,4,0},
            {0,0,1,7,3,0,6,8,0},
            {8,0,0,0,1,0,0,0,6},
            {0,0,0,9,0,5,8,1,3},
            {3,1,0,0,0,0,0,0,0},
        };

        public static int[,] NakedPairInARow = new int[,]
        {
            {0,8,0,6,4,3,1,0,0},
            {1,0,4,9,0,0,0,0,0},
            {0,6,3,0,8,0,0,4,0},
            {0,3,5,0,0,0,0,0,8},
            {0,4,0,0,0,0,0,0,1},
            {0,1,0,0,3,8,2,0,0},
            {0,0,1,0,2,0,0,0,0},
            {0,0,0,0,0,0,6,0,0},
            {3,2,0,5,0,4,9,0,7},
        };

        public static int[,] NakedPairInAColumn = new int[,]
        {
            {0,2,9,0,0,8,4,0,1},
            {0,7,8,1,0,9,0,0,3},
            {0,5,1,0,0,6,9,0,0},
            {8,4,7,2,6,5,3,1,9},
            {2,9,3,0,8,1,6,0,5},
            {0,0,0,9,0,3,0,0,0},
            {7,3,0,0,0,0,0,9,0},
            {9,0,0,0,0,0,7,3,0},
            {0,0,0,3,9,7,0,0,6},
        };

        public static int[,] NakedPairInABlock = new int[,]
        {
            {9,2,0,6,4,1,6,0,0},
            {6,4,1,5,0,0,9,2,3},
            {0,3,0,2,6,9,0,0,0},
            {0,6,0,0,0,0,0,3,0},
            {5,9,2,0,0,0,1,0,6},
            {0,1,3,0,5,6,2,7,0},
            {3,0,0,4,0,0,7,6,0},
            {0,0,0,6,0,0,3,0,0},
            {0,0,6,0,0,0,4,0,8},
        };

        /// <summary>
        /// Row 7  COl:4,6,7(-1)
        /// </summary>
        public static int[,] NakedTripletInARow = new int[,]
        {
            {0,8,2,3,0,0,0,6,5},
            {0,0,0,0,2,8,3,0,0},
            {0,0,3,0,9,5,8,2,1},
            {4,5,8,0,3,0,2,0,0},
            {1,0,0,5,0,0,0,0,0},
            {0,0,0,8,0,0,5,0,0},
            {0,0,6,0,0,0,0,9,0},
            {0,0,0,0,0,3,1,0,0},
            {8,0,0,2,0,0,0,5,3},
        };
        /*
{0,0,2,3,0,0,0,6,5},
{0,0,0,0,2,8,3,0,0},
{0,0,3,0,9,5,0,2,1},
{4,5,8,0,3,0,2,0,0},
{1,0,0,5,0,0,0,0,0},
{0,0,0,8,0,0,5,0,0},
{0,0,6,0,0,0,0,9,0},
{0,0,0,0,0,3,1,0,0},
{8,0,0,2,0,0,0,5,0},
        *
        *
{7,8,2,3,1,4,9,6,5,},
{9,1,5,6,2,8,3,4,7,},
{6,4,3,7,9,5,8,2,1,},
{4,5,8,1,3,6,2,7,9,},
{1,2,7,5,4,9,6,3,8,},
{3,6,9,8,7,2,5,1,4,},
{5,3,6,4,8,1,7,9,2,},
{2,7,4,9,5,3,1,8,6,},
{8,9,1,2,6,7,4,5,3,},
        */
        /// <summary>
        /// Row:3,4,6 Col:5
        /// </summary>
        public static int[,] NakedTripletInAColumn = new int[,]
        {
            {0,0,0,8,0,3,9,2,0},
            {0,4,0,0,7,0,0,5,0},
            {0,3,0,0,0,0,0,0,0},
            {0,0,4,0,6,0,0,0,0},
            {0,2,7,0,1,0,4,6,0},
            {0,6,3,0,0,7,2,8,0},
            {0,0,0,7,0,0,0,0,0},
            {4,0,0,0,0,0,0,1,6},
            {3,0,0,0,0,5,0,9,0},
        };

        /// <summary>
        /// Row: 5 Col:6,7,8,
        /// </summary>
        public static int[,] NakedTripletInABlock = new int[,]
        {
            {0,0,0,1,3,9,8,5,2},
            {0,0,5,0,0,6,0,0,0},
            {1,0,0,0,5,0,6,9,0},
            {0,0,0,7,0,8,0,0,6},
            {0,0,0,5,0,3,0,0,0},
            {8,4,9,6,1,2,0,0,0},
            {0,0,0,0,8,0,0,1,3},
            {7,0,0,0,0,1,4,0,0},
            {0,1,2,0,0,5,0,0,0},
        };

        public static int[,] HiddenPairInARow = new int[,]
        {
            {0,0,0,0,5,7,2,0,0},
            {9,0,0,0,2,8,7,0,0},
            {2,0,7,3,1,0,0,0,4},
            {0,0,0,5,7,1,3,0,0},
            {3,7,1,0,4,0,5,8,9},
            {6,2,5,8,9,3,4,7,1},
            {0,0,0,0,0,0,6,0,5},
            {0,6,2,0,0,0,1,0,0},
            {0,0,0,0,6,0,0,4,0},
        };

        public static int[,] HiddenPairInAColumn = new int[,]
        {
            {4,0,0,0,0,7,0,0,1},
            {8,9,0,0,0,4,7,6,0},
            {0,7,1,9,0,0,4,8,0},
            {7,4,0,2,0,0,6,0,0},
            {3,2,0,6,0,0,0,7,4},
            {1,5,6,7,4,3,8,2,9},
            {5,0,0,0,0,9,0,0,7},
            {0,0,7,0,0,0,0,0,8},
            {9,8,4,0,7,0,0,5,6},
        };

        public static int[,] HiddenPairInABlock = new int[,]
        {
            {1,0,0,0,0,0,0,0,0},
            {8,0,0,4,5,6,7,0,1},
            {0,7,0,0,0,2,8,0,0},
            {5,1,7,3,6,9,2,0,0},
            {2,6,9,0,0,4,0,3,0},
            {3,4,8,0,0,0,6,0,0},
            {9,0,0,0,4,0,0,5,0},
            {0,2,0,0,0,0,0,7,0},
            {7,0,0,6,0,0,4,0,0},
        };

        public static int[,] HiddenTripletInARow = new int[,]
        {
            {1,0,0,0,0,0,0,0,0},
            {8,0,0,4,5,6,7,0,1},
            {0,7,0,0,0,2,8,0,0},
            {5,1,7,3,6,9,2,0,0},
            {2,6,9,0,0,4,0,3,0},
            {3,4,8,0,0,0,6,0,0},
            {9,0,0,0,4,0,0,5,0},
            {0,2,0,0,0,0,0,7,0},
            {7,0,0,6,0,0,4,0,0},
        };

        public static int[,] HiddenTripletInAColumn = new int[,]
        {
            {6,4,0,2,0,0,9,1,0},
            {0,0,0,6,0,1,0,4,0},
            {0,0,1,0,0,0,0,6,0},
            {0,0,0,0,6,7,0,8,4},
            {4,6,0,8,1,0,0,5,7},
            {8,0,0,5,0,0,1,9,6},
            {3,0,4,1,0,6,5,2,8},
            {0,0,6,0,2,0,4,3,1},
            {0,0,2,4,0,0,6,7,9},
        };

        public static int[,] HiddenTripletInABlock = new int[,]
        {
            {0,0,8,7,0,0,0,0,0},
            {2,0,0,0,9,0,0,3,0},
            {0,0,5,6,0,0,0,7,0},
            {6,2,9,0,0,0,8,4,3},
            {7,1,3,8,6,4,0,0,5},
            {0,0,4,3,2,9,7,1,6},
            {3,0,0,0,8,6,0,5,7},
            {0,0,0,4,0,0,0,8,9},
            {0,0,0,0,1,0,3,0,0},
        };

    }
}

/*


public static int[,] LockedCandidatesBlockWithinRow = new int[,]
{
{0,4,8,0,0,3,9,0,0},
{0,5,7,6,9,0,4,0,8},
{0,2,9,7,0,0,5,1,0},
{0,0,1,0,0,0,7,0,9},
{0,0,2,9,7,0,1,0,0},
{9,7,3,0,0,0,6,5,0},
{7,0,5,0,2,0,3,4,0},
{2,0,6,0,0,0,8,0,0},
{8,0,4,0,0,7,2,0,0},
};

public static int[,] LockedCandidatesBlockWithinColumn = new int[,]
{
{0,5,2,4,1,0,6,0,0},
{6,8,0,0,0,0,4,3,0},
{4,0,0,8,0,0,2,0,0},
{0,6,0,0,0,8,0,4,0},
{0,0,4,6,0,1,0,0,9},
{0,0,0,7,9,4,0,6,0},
{2,0,0,3,0,0,0,0,4},
{5,0,0,9,4,7,0,2,6},
{7,4,6,1,8,2,9,5,3},
};

public static int[,] LockedCandidatesRowWithinBlock = new int[,]
{
{0,0,0,0,0,0,0,0,7},
{1,0,0,8,0,0,0,5,0},
{0,0,0,9,0,4,0,0,0},
{0,7,1,0,9,0,8,0,2},
{0,2,9,0,0,1,0,0,0},
{0,0,0,0,2,0,0,0,0},
{9,6,0,0,0,5,4,2,0},
{0,0,2,6,0,9,0,1,5},
{3,1,5,2,4,0,0,6,0},
};

public static int[,] LockedCandidatesColumnWithinBlock = new int[,]
{
{0,0,0,0,0,1,0,0,0},
{0,8,4,0,7,0,0,0,0},
{0,7,3,4,0,0,0,0,0},
{0,0,8,5,6,0,3,0,1},
{0,3,0,1,8,9,2,4,0},
{0,0,1,7,3,0,6,8,0},
{8,0,0,0,1,0,0,0,6},
{0,0,0,9,0,5,8,1,3},
{3,1,0,0,0,0,0,0,0},
};

public static int[,] NakedPairInARow = new int[,]
{
{0,8,0,6,4,3,1,0,0},
{1,0,4,9,0,0,0,0,0},
{0,6,3,0,8,0,0,4,0},
{0,3,5,0,0,0,0,0,8},
{0,4,0,0,0,0,0,0,1},
{0,1,0,0,3,8,2,0,0},
{0,0,1,0,2,0,0,0,0},
{0,0,0,0,0,0,6,0,0},
{3,2,0,5,0,4,9,0,7},
};

public static int[,] NakedPairInAColumn = new int[,]
{
{0,2,9,0,0,8,4,0,1},
{0,7,8,1,0,9,0,0,3},
{0,5,1,0,0,6,9,0,0},
{8,4,7,2,6,5,3,1,9},
{2,9,3,0,8,1,6,0,5},
{0,0,0,9,0,3,0,0,0},
{7,3,0,0,0,0,0,9,0},
{9,0,0,0,0,0,7,3,0},
{0,0,0,3,9,7,0,0,6},
};

public static int[,] NakedPairInABlock = new int[,]
{
{9,2,0,6,4,1,6,0,0},
{6,4,1,5,0,0,9,2,3},
{0,3,0,2,6,9,0,0,0},
{0,6,0,0,0,0,0,3,0},
{5,9,2,0,0,0,1,0,6},
{0,1,3,0,5,6,2,7,0},
{3,0,0,4,0,0,7,6,0},
{0,0,0,6,0,0,3,0,0},
{0,0,6,0,0,0,4,0,8},
};

public static int[,] NakedTripletInARow = new int[,]
{
{0,0,2,3,0,0,0,6,5},
{0,0,0,0,2,8,3,0,0},
{0,0,3,0,9,5,0,2,1},
{4,5,8,0,3,0,2,0,0},
{1,0,0,5,0,0,0,0,0},
{0,0,0,8,0,0,5,0,0},
{0,0,6,0,0,0,0,9,0},
{0,0,0,0,0,3,1,0,0},
{8,0,0,2,0,0,0,5,0},
};

public static int[,] NakedTripletInAColumn = new int[,]
{
{0,0,0,8,0,3,9,2,0},
{0,4,0,0,7,0,0,5,0},
{0,3,0,0,0,0,0,0,0},
{0,0,4,0,6,0,0,0,0},
{0,2,7,0,1,0,4,6,0},
{0,6,3,0,0,7,2,8,0},
{0,0,0,7,0,0,0,0,0},
{4,0,0,0,0,0,0,1,6},
{3,0,0,0,0,5,0,9,0},
};

public static int[,] NakedTripletInABlock = new int[,]
{
{0,0,0,1,3,9,8,5,2},
{0,0,5,0,0,6,0,0,0},
{1,0,0,0,5,0,6,9,0},
{0,0,0,7,0,8,0,0,6},
{0,0,0,5,0,3,0,0,0},
{8,4,9,6,1,2,0,0,0},
{0,0,0,0,8,0,0,1,3},
{7,0,0,0,0,1,4,0,0},
{0,1,2,0,0,5,0,0,0},
};

public static int[,] HiddenPairInARow = new int[,]
{
{0,0,0,0,5,7,2,0,0},
{9,0,0,0,2,8,7,0,0},
{2,0,7,3,1,0,0,0,4},
{0,0,0,5,7,1,3,0,0},
{3,7,1,0,4,0,5,8,9},
{6,2,5,8,9,3,4,7,1},
{0,0,0,0,0,0,6,0,5},
{0,6,2,0,0,0,1,0,0},
{0,0,0,0,6,0,0,4,0},
};

public static int[,] HiddenPairInAColumn = new int[,]
{
{4,0,0,0,0,7,0,0,1},
{8,9,0,0,0,4,7,6,0},
{0,7,1,9,0,0,4,8,0},
{7,4,0,2,0,0,6,0,0},
{3,2,0,6,0,0,0,7,4},
{1,5,6,7,4,3,8,2,9},
{5,0,0,0,0,9,0,0,7},
{0,0,7,0,0,0,0,0,8},
{9,8,4,0,7,0,0,5,6},
};

public static int[,] HiddenPairInABlock = new int[,]
{
{1,0,0,0,0,0,0,0,0},
{8,0,0,4,5,6,7,0,1},
{0,7,0,0,0,2,8,0,0},
{5,1,7,3,6,9,2,0,0},
{2,6,9,0,0,4,0,3,0},
{3,4,8,0,0,0,6,0,0},
{9,0,0,0,4,0,0,5,0},
{0,2,0,0,0,0,0,7,0},
{7,0,0,6,0,0,4,0,0},
};

public static int[,] HiddenTripletInARow = new int[,]
{
{1,0,0,0,0,0,0,0,0},
{8,0,0,4,5,6,7,0,1},
{0,7,0,0,0,2,8,0,0},
{5,1,7,3,6,9,2,0,0},
{2,6,9,0,0,4,0,3,0},
{3,4,8,0,0,0,6,0,0},
{9,0,0,0,4,0,0,5,0},
{0,2,0,0,0,0,0,7,0},
{7,0,0,6,0,0,4,0,0},
};

public static int[,] HiddenTripletInAColumn = new int[,]
{
{6,4,0,2,0,0,9,1,0},
{0,0,0,6,0,1,0,4,0},
{0,0,1,0,0,0,0,6,0},
{0,0,0,0,6,7,0,8,4},
{4,6,0,8,1,0,0,5,7},
{8,0,0,5,0,0,1,9,6},
{3,0,4,1,0,6,5,2,8},
{0,0,6,0,2,0,4,3,1},
{0,0,2,4,0,0,6,7,9},
};

public static int[,] HiddenTripletInABlock = new int[,]
{
{0,0,8,7,0,0,0,0,0},
{2,0,0,0,9,0,0,3,0},
{0,0,5,6,0,0,0,7,0},
{6,2,9,0,0,0,8,4,3},
{7,1,3,8,6,4,0,0,5},
{0,0,4,3,2,9,7,1,6},
{3,0,0,0,8,6,0,5,7},
{0,0,0,4,0,0,0,8,9},
{0,0,0,0,1,0,3,0,0},
};
 */
/*
 
{8,0,0,0,0,5,0,0,7,},
{2,0,0,0,0,6,1,0,0,},
{7,0,0,0,0,0,9,0,0,},
{0,1,0,0,0,0,7,0,6,},
{0,0,0,3,0,0,0,0,4,},
{0,0,2,0,5,0,0,3,0,},
{0,0,0,0,0,0,0,0,0,},
{0,3,0,7,2,9,6,0,0,},
{0,0,0,0,1,0,0,0,5,},
 
 
 
 * */